---
---
---

–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è ‚Äî —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω —ç–∫–æ–Ω–æ–º–∏—Ç –∫—É—á—É –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–Ω–∏–∂–∞–µ—Ç ¬´bus factor¬ª. –ù–∏–∂–µ –¥–∞—é **–∫–æ—Ä–Ω–µ–≤–æ–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω** (–∫–æ–ø–∏—Ä—É–π –∫–∞–∫ Markdown), –ø–ª—é—Å **—Ä–∞—Å—à–∏—Ä—è–µ–º—ã–µ –º–æ–¥—É–ª–∏** (–¥–æ–±–∞–≤–ª—è–µ—à—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏). –Ø –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ bare-metal k8s + Anthos + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GCP –∏ –Ω–∞ —Ç–æ, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –±—É–¥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∏ Ops/SRE.

---

# üìÑ –®–∞–±–ª–æ–Ω ¬´Design Doc –¥–ª—è k8s-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞¬ª

````markdown
---
title: <–ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞>
component_id: <—É–Ω–∏–∫–∞–ª—å–Ω—ã–π-id>
owners: ["<–§–ò–û/–ª–æ–≥–∏–Ω—ã>"]
stakeholders: ["Platform", "Security", "FinOps", "Tenant X"]
status: Draft | In-Review | Approved | Active | Deprecated | Retired
doc_version: "v1.0.0"
component_version: "<semver/commit>"
last_reviewed: "YYYY-MM-DD"
next_review_due: "YYYY-MM-DD"
links:
  repo: "<git-url>"
  ci_cd: "<pipeline-url>"
  adr: ["<adr-001-...>"]
  dashboards: ["<grafana-url>"]
  alerts: ["<alertmanager/url or policy>"]
  runbooks: ["<runbook-1>", "<runbook-2>"]
  argo_app: "<argo-app if any>"
  pages: "<doc site>"
---

## 0. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
- **–¶–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞:** –∫—Ä–∞—Ç–∫–æ –∑–∞—á–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç.
- **–ê—É–¥–∏—Ç-—Ä–µ–≤—å—é:** —Ä–∞–∑ –≤ N –º–µ—Å—è—Ü–µ–≤; –≤–ª–∞–¥–µ–ª–µ—Ü: <–ò–º—è/–†–æ–ª—å>.
- **–ö–∞–∫ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:** PR –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π `docs/`, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≤—å—é–µ—Ä—ã: <—Å–ø–∏—Å–æ–∫>.
- **–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:** 
  - *Draft* ‚Äî —Å–±–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π; 
  - *In-Review* ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞;
  - *Approved* ‚Äî —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ; 
  - *Active* ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∏ –≤ –ø—Ä–æ–¥–µ; 
  - *Deprecated/Retired* ‚Äî –ø–ª–∞–Ω/—Ñ–∞–∫—Ç –≤—ã–≤–æ–¥–∞ –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.
- **–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (changelog):** –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤.

## 1. –ß—Ç–æ –∏ –¥–ª—è –∫–æ–≥–æ –º—ã –¥–µ–ª–∞–µ–º?
- **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** 1‚Äì2 –∞–±–∑–∞—Ü–∞, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–∞–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–∞—ë—Ç.
- **–ö–æ–º—É –ø–æ–ª–µ–∑–Ω–æ (–ø–µ—Ä—Å–æ–Ω—ã/—Ä–æ–ª–∏):** Tenants, Platform, SRE, Security, Billing.
- **–ë–∏–∑–Ω–µ—Å-—Ü–µ–ª–∏ / KPI:** <—Ü–µ–ª—å>, <–º–µ—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—Ö–∞/SLI>, <–ø—Ä–∏–µ–º–æ—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏>.
- **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ (Out of scope):** <—á—Ç–æ —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –¥–µ–ª–∞–µ–º>.

## 2. –ö–∞–∫ –¥–µ–ø–ª–æ–∏—Ç—Å—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
- **–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:** Helm/Kustomize/ArgoCD/Flux (—É–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–π –∏ –≥–¥–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã).
- **–û–∫—Ä—É–∂–µ–Ω–∏—è:** dev / preprod / prod; —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–∫–∞—Ç–∫–∏ (Blue/Green, Canary, Argo Rollouts).
- **–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:** –æ–±—Ä–∞–∑ `<registry>/<project>/<image>:<tag>`, SBOM, –ø–æ–¥–ø–∏—Å—å (cosign).
- **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** ConfigMap/Secret, External Secrets (–∏—Å—Ç–æ—á–Ω–∏–∫: GCP Secret Manager/KMS).
- **–°–µ—Ç–µ–≤–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:** Namespace, Service(—ã), Ingress/ Istio Gateway + VirtualService.
- **–°–µ—Ä–≤–∏—Å-–º–µ—à:** mTLS (PeerAuthentication), RBAC/AuthorizationPolicy, DestinationRule.
- **–°–∫–µ–π–ª–∏–Ω–≥:** HPA/KEDA —Ç—Ä–∏–≥–≥–µ—Ä—ã (CPU, mem, HTTP RPS, Pub/Sub –∏ —Ç.–¥.).
- **–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/–æ—Ç–∫–∞—Ç–æ–≤:** –∫–æ–º–∞–Ω–¥—ã/–ø—Ä–æ—Ü–µ–¥—É—Ä–∞, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π (compat matrix).
- **–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–¥–∞—Ö:** —Ä–µ—Å—É—Ä—Å—ã, –∑–∞–ø—Ä–æ—Å—ã/–ª–∏–º–∏—Ç—ã, affinity/tolerations, securityContext.
- **–•—Ä–∞–Ω–∏–ª–∏—â–µ:** PVC/StorageClass, —Ä–∞–∑–º–µ—Ä/–∫–ª–∞—Å—Å, backup-–ø–æ–ª–∏—Ç–∏–∫–∞.

## 3. –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
–°–µ—Ä–≤–∏—Å—ã –≤–Ω–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏/–∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã.
| –°–µ—Ä–≤–∏—Å/–†–µ—Å—É—Ä—Å | –ü—Ä–æ–≤–∞–π–¥–µ—Ä | –î–æ—Å—Ç—É–ø/–°–µ—Ç—å | –ê—É—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è | SLA –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ | –†–µ–∂–∏–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ |
|---|---|---|---|---|---|
| Pub/Sub topic `...` | GCP | VPC/VPN/Interconnect | IAM —Ä–æ–ª—å `<role>` | 99.9% | Retrying + DLQ |
| Cloud SQL `...` | GCP | Private IP | IAM DB Auth | 99.95% | Read-only mode |

- **–ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ/–≤ dev –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:** –∑–∞–≥–ª—É—à–∫–∏, —ç–º—É–ª—è—Ç–æ—Ä—ã, feature flags.

## 4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è k8s-—Ä–µ—Å—É—Ä—Å–æ–≤)
| –ö–ª–∞—Å—Å | –ò–º—è | Namespace | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ | –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å | –ò—Å—Ç–æ—á–Ω–∏–∫ (helm/kustomize –ø—É—Ç—å) | –ü–æ—Ä—Ç—ã/–ü—Ä–æ—Ç–æ–∫–æ–ª—ã | Requests/Limits | –•—Ä–∞–Ω–µ–Ω–∏–µ |
|---|---|---|---|---|---|---|---|---|
| Deployment | api | platform-x | REST API | P1 | charts/api | 8080/TCP | 200m/512Mi; 1/1Gi | - |
| Service | api | platform-x | ClusterIP | P1 | charts/api | 8080 | - | - |
| VirtualService | api | platform-x | Ingress | P1 | charts/mesh | 443/HTTP2 | - | - |
| HPA | api | platform-x | Autoscale | P2 | charts/api | - | 50% CPU | - |
| CronJob | gc | platform-x | –û—á–∏—Å—Ç–∫–∞ | P3 | charts/gc | - | 100m/256Mi | - |
| PVC | data | platform-x | –î–∞–Ω–Ω—ã–µ | P1 | charts/db | - | - | 200Gi / fast-ssd |

---

# üõ† Operations

## 5. –†–∞–Ω–±—É–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏)
**5.1. –ò–Ω—Ü–∏–¥–µ–Ω—Ç: 5xx –Ω–∞ ingress**
- –°–∏–º–ø—Ç–æ–º—ã/–∞–ª–µ—Ä—Ç—ã: `<alert name>`, –¥–∞—à–±–æ—Ä–¥: `<url>`.
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (5‚Äì10 –º–∏–Ω—É—Ç):  
  1) `kubectl -n platform-x get pods -o wide` ‚Äî –∏—â–µ–º CrashLoopBackOff  
  2) `istioctl proxy-config clusters <pod>` ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º upstream  
  3) `kubectl -n platform-x logs deploy/api --tail=100` ‚Äî –æ—à–∏–±–∫–∏?  
- –í—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ö–æ–¥: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å (Argo Rollouts: promote/abort).  
- –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ: –æ—Ç–∫–∞—Ç Helm `helm rollback <release> <rev>` / Argo rollback.  
- –ü–æ—Å—Ç-–∏–Ω—Ü–∏–¥–µ–Ω—Ç: RCA –≤ 24 —á; –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç/–∞–ª–µ—Ä—Ç.

**5.2. –ò–Ω—Ü–∏–¥–µ–Ω—Ç: —Ä–æ—Å—Ç latency / –æ—à–∏–±–∫–∏ –ë–î**
- –ü—Ä–æ–≤–µ—Ä–∫–∏: p95/p99, saturations (CPU, GC), –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –æ—à–∏–±–∫–∏ SQL.
- –î–µ–π—Å—Ç–≤–∏—è: –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–ø–ª–∏–∫–∏/HPA max, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å PVC **–∑–∞–ø—Ä–µ—Ç–∏—Ç—å** –±–µ–∑ –±—ç–∫–∞–ø–∞.

> –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–Ω–±—É–∫, ETA –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –≤–ª–∞–¥–µ–ª–µ—Ü.

## 6. –ö–∞–∫ –¥–µ–ø–ª–æ–∏—Ç—å (–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª)
- **Pre-checks:** –∫–≤–æ—Ä—É–º etcd –æ–∫, –∫–ª–∞—Å—Ç–µ—Ä –∑–¥–æ—Ä–æ–≤, –º–µ—Å—Ç–æ –≤ –ø—É–ª–µ, –æ–±—Ä–∞–∑—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ.
- **–ö–æ–º–∞–Ω–¥—ã —Ä–∞—Å–∫–∞—Ç–∫–∏:**  
  - Helm:  
    ```bash
    helm upgrade --install api charts/api \
      -n platform-x -f values/values-prod.yaml --atomic --timeout 10m
    ```
  - ArgoCD: sync policy, wave order; –∫–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ sync/rollback.
- **Smoke-—Ç–µ—Å—Ç—ã:** `GET /healthz`, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±—ã, synthetic checks.
- **–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞:** error budget burn, SLO –ø—Ä–∏–≥–æ–¥–µ–Ω, –∞–ª–µ—Ä—Ç—ã –∑–µ–ª—ë–Ω—ã–µ.
- **–û—Ç–∫–∞—Ç:** –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ + —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–Ω–±—É–∫ (—Å–º. 5.1).

## 7. –ú–µ—Ç—Ä–∏–∫–∏ (—á—Ç–æ –∏ –≥–¥–µ)
- **–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã/–∏—Å—Ç–æ—á–Ω–∏–∫–∏:** app `/metrics` (Prometheus), kube-state-metrics, Istio telemetry.
- **–ö–ª—é—á–µ–≤—ã–µ SLI –∏ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–∏—Å–∏:**
  - *Availability:* `success_rate = 1 - rate(5xx[5m]) / rate(http_total[5m])`
  - *Latency:* `histogram_quantile(0.95, rate(http_duration_bucket[5m]))`
  - *Saturation:* CPU/mem, pod restarts, HPA activity.
- **SLO/—Ü–µ–ª–∏:** uptime ‚â• 99.9%, p95 < 300ms (prod).
- **–î–∞—à–±–æ—Ä–¥—ã:** —Å—Å—ã–ª–∫–∏ –Ω–∞ Grafana uid.
- **–ê–ª–µ—Ä—Ç—ã:** –ø—Ä–∞–≤–∏–ª–æ, –ø–æ—Ä–æ–≥, –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ, —Å–≤—è–∑—å —Å —Ä–∞–Ω–±—É–∫–æ–º.

## 8. –õ–æ–≥–∏ (–∫–∞–∫–∏–µ –∏ –≥–¥–µ)
- **–°–±–æ—Ä:** stdout/stderr —á–µ—Ä–µ–∑ Fluent Bit/Vector ‚Üí Loki/ELK/Cloud Logging.
- **–§–æ—Ä–º–∞—Ç:** JSON; –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: `trace_id`, `span_id`, `tenant_id`, `req_id`.
- **–†–µ—Ç–µ–Ω—à–Ω:** dev 7 –¥–Ω–µ–π, prod 30‚Äì90 –¥–Ω–µ–π; PII –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ.
- **–ü–æ–∏—Å–∫–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã (Saved queries):** —Å—Å—ã–ª–∫–∞/—à–∞–±–ª–æ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤.
- **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:** –∫–∞–∫ –∏–∑ –∞–ª–µ—Ä—Ç–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–≥–∏/—Ç—Ä–µ–π—Å—ã.

---
````

---

## üéØ –ú–∏–Ω–∏-–ø—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (GCP)

* **Cloud SQL (PostgreSQL 14)**
  –î–æ—Å—Ç—É–ø: Private IP —á–µ—Ä–µ–∑ Cloud VPN/Interconnect.
  Auth: IAM DB Auth + —Ä–æ—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–∑ –≤ 90 –¥–Ω–µ–π.
  **Fail mode:** –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ read-only, –≤–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è; –∞–ª–µ—Ä—Ç `db_error_rate > 1% 5m`.
  **–¢–µ—Å—Ç –≤ dev:** –ª–æ–∫–∞–ª—å–Ω—ã–π Postgres –≤ Kind –∏–ª–∏ Cloud SQL Proxy; feature flag `USE_LOCAL_DB=true`.

---

## üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (docs-as-code)

```
docs/
  design/<component-id>.md          # —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
  runbooks/<alert-or-symptom>.md    # –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π
  ops/deploy.md                     # –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ä–µ–ª–∏–∑–∞
  ops/rollback.md
  ops/checklists.md                 # pre/post release —á–µ–∫-–ª–∏—Å—Ç—ã
  adr/adr-001-...md                 # –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
charts/ or kustomize/
  ...
```

---

## üîå –ë–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å (—á–∞—Å—Ç–æ —É–ø—É—Å–∫–∞—é—Ç)

1. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å**

* –ú–æ–¥–µ–ª—å —É–≥—Ä–æ–∑ (–∫—Ä–∞—Ç–∫–∞—è): –¥–∞–Ω–Ω—ã–µ, –∫–∞–Ω–∞–ª—ã, –∫—Ç–æ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫.
* –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã (cosign), –ø–æ–ª–∏—Ç–∏–∫–∞ admission (PSa/PSP-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç, Kyverno/Gatekeeper).
* –°–µ–∫—Ä–µ—Ç—ã: –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è, –∫–∞–∫ —Ä–æ—Ç–∏—Ä—É—é—Ç—Å—è, –∫—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.
* –°–µ—Ç–µ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (NetworkPolicy), mTLS/–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.

2. **–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ DR**

* –ß—Ç–æ –±—ç–∫–∞–ø–∏–º (PVC/–ë–î/–∫–æ–Ω—Ñ–∏–≥), —á–µ–º (Velero, –æ–ø–µ—Ä–∞—Ç–æ—Ä –ë–î), –∫—É–¥–∞ (bucket, —Ä–µ–≥–∏–æ–Ω).
* RPO/RTO –∏ –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (—á–∞—Å—Ç–æ—Ç–∞ DR-–¥—Ä–∏–ª–∞).

3. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —ë–º–∫–æ—Å—Ç—å**

* –ù–∞–≥—Ä—É–∑–∫–∞ (QPS, —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π), –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –ª–∏–º–∏—Ç—ã.
* –ü–ª–∞–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–≥–æ—Ä–∏–∑–æ–Ω—Ç/–≤–µ—Ä—Ç–∏–∫–∞–ª—å, –ª–∏–º–∏—Ç—ã HPA/KEDA).

4. **–°–µ—Ç—å –∏ –º–Ω–æ–≥–æ–æ–∫—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å/–º—É–ª—å—Ç–∏–∫–ª–∞—Å—Ç–µ—Ä (Anthos)**

* –ì–¥–µ –∂–∏–≤—É—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫, –ø–æ–ª–∏—Ç–∏–∫–∞ –∫—Ä–æ—Å—Å-—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–µ–π–ª–æ–≤–µ—Ä–∞.
* –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π Istio/—Å–µ—Ç–µ–≤—ã—Ö CRD.

5. **–§–∏–Ω–∞–Ω—Å—ã/–∫–≤–æ—Ç—ã**

* –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ, egress, GCP-—Å–µ—Ä–≤–∏—Å—ã), –∫–≤–æ—Ç—ã GCP, –±—é–¥–∂–µ—Ç-–∞–ª–µ—Ä—Ç—ã.

6. **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—ã–≤–æ–¥–∞ –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (sunset)**

* –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –¥–∞—Ç–∞ EOL, –∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª—è–µ–º.

7. **–ö–∞—á–µ—Å—Ç–≤–æ/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**

* e2e –≤ k8s (kind/ephemeral), —Ç–µ—Å—Ç-–¥–∞–Ω–Ω—ã–µ, chaos-scenarios.

8. **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –º–∞—Ç—Ä–∏—Ü–∞ –≤–µ—Ä—Å–∏–π**

* k8s/Istio/Sidecar API, –∫–ª–∏–µ–Ω—Ç—ã/SDK, —Å—Ö–µ–º—ã –ë–î.

> –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ¬´—Ç–æ–Ω–∫–∏–º¬ª ‚Äî –≤—ã–Ω–µ—Å–∏ —ç—Ç–∏ –±–ª–æ–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (appendix) –∏ –æ—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —à–∞–±–ª–æ–Ω–µ.

---

## üß© –ù–∞–±—Ä–æ—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ values.yaml)

```yaml
resources:
  requests: { cpu: "200m", memory: "512Mi" }
  limits:   { cpu: "1",    memory: "1Gi" }
readinessProbe:
  httpGet: { path: /ready, port: 8080 }
  periodSeconds: 10
livenessProbe:
  httpGet: { path: /healthz, port: 8080 }
  periodSeconds: 10
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 60
mesh:
  mtls: strict
logging:
  format: json
  include:
    - trace_id
    - span_id
    - tenant_id
    - request_id
```

---

## ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–º

* [ ] –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã, SBOM –ø—Ä–∏–ª–æ–∂–µ–Ω.
* [ ] –°–µ–∫—Ä–µ—Ç—ã ‚Üí External Secrets + KMS.
* [ ] HPA/KEDA –≤–∫–ª—é—á–µ–Ω—ã, –ª–∏–º–∏—Ç—ã –∑–∞–¥–∞–Ω—ã.
* [ ] NetworkPolicy –∑–∞–∫—Ä—ã–≤–∞–µ—Ç egress/ingress –ø–æ –º–∏–Ω–∏–º—É–º—É.
* [ ] SLO –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ä–∞–Ω–±—É–∫–∞–º.
* [ ] –î–∞—à–±–æ—Ä–¥—ã –≥—Ä–∞—Ñ–∞–Ω—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏ –ª–∏–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç.
* [ ] DR-–ø–ª–∞–Ω –∏ –±—ç–∫–∞–ø—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.
* [ ] –ü–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞ –æ–ø—Ä–æ–±–æ–≤–∞–Ω –≤ preprod.

---

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å **–≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª** –ø–æ–¥ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (—Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏) –ø–æ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Å—Ç—ç–∫—É: Helm/Kustomize, Istio, –≤–Ω–µ—à–Ω–∏–µ GCP-—Å–µ—Ä–≤–∏—Å—ã –∏ —Ç.–¥.

---
---
---


Got it, L√∂scha. Here‚Äôs a clean, copy-pasteable **English template** for a ‚ÄúDesign Doc for a Kubernetes Component,‚Äù tuned for bare-metal Kubernetes + Anthos + GCP integrations. It‚Äôs lean by default and expandable via optional modules.

---

# Design Doc ‚Äî Kubernetes Component

````markdown
---
title: <Component name>
component_id: <unique-id>
owners: ["<name or team>"]
stakeholders: ["Platform", "SRE", "Security", "FinOps", "Tenant X"]
status: Draft | In-Review | Approved | Active | Deprecated | Retired
doc_version: "v1.0.0"
component_version: "<semver or commit>"
last_reviewed: "YYYY-MM-DD"
next_review_due: "YYYY-MM-DD"
links:
  repo: "<git-url>"
  ci_cd: "<pipeline-url>"
  adr: ["<adr-001-...>"]
  dashboards: ["<grafana-url>"]
  alerts: ["<alertmanager-url or policy>"]
  runbooks: ["<runbook-1>", "<runbook-2>"]
  argo_app: "<argocd-app if any>"
  docs_site: "<internal-docs url>"
---

## 0. Document Lifecycle
- **Purpose:** Why this document exists and who should use it.
- **Change process:** PRs to `docs/` with mandatory reviewers: <list>.
- **Review cadence:** Every <N> months; owner: <name/role>.
- **Status criteria:**
  - *Draft* ‚Äî gathering requirements.
  - *In-Review* ‚Äî architecture review in progress.
  - *Approved* ‚Äî design signed off.
  - *Active* ‚Äî implemented and running in production.
  - *Deprecated/Retired* ‚Äî decommission plan / completed retirement.
- **Changelog:** Bullet list of key changes with dates.

## 1. What are we building and for whom? (Business goals)
- **One-paragraph summary:** What the component does and the value it delivers.
- **Primary users/roles:** Tenants, Platform, SRE, Security, Billing, etc.
- **Business goals & KPIs:** <goal>, <success metric/SLI/SLO>, <acceptance criteria>.
- **Explicit non-goals (out of scope):** What we intentionally exclude.

## 2. How is it deployed in the cluster?
- **Delivery mechanism:** Helm / Kustomize / Argo CD / Flux (where the manifests live).
- **Environments & rollout strategy:** dev / preprod / prod; Blue-Green, Canary, Argo Rollouts.
- **Artifacts:** Image `<registry>/<project>/<image>:<tag>`, SBOM, cosign signature.
- **Config & secrets:** ConfigMap/Secret, External Secrets (GCP Secret Manager/KMS).
- **Networking & exposure:** Namespace, Service(s), Ingress / Istio Gateway + VirtualService.
- **Service mesh:** mTLS mode (PeerAuthentication), AuthorizationPolicy, DestinationRule.
- **Scaling:** HPA/KEDA triggers (CPU/memory/RPS/Pub/Sub/etc.).
- **Updates & rollback:** Commands/procedure, version compatibility matrix.
- **Scheduling & resources:** requests/limits, affinity/tolerations, securityContext/PodSecurity.
- **Storage:** PVC/StorageClass, size/class, backup policy, retention.
- **Node constraints:** Bare-metal specifics (NICs, storage classes, NUMA if relevant).

## 3. External dependencies
List services outside the cluster and/or third-party providers.

| Service / Resource             | Provider | Network Path                 | AuthN/AuthZ                   | Dependency SLA | Degradation / Fallback |
|--------------------------------|----------|------------------------------|-------------------------------|----------------|------------------------|
| Pub/Sub topic `projects/...`   | GCP      | VPC / VPN / Interconnect     | IAM SA `<service-account>`    | 99.9%          | Retry + DLQ            |
| Cloud SQL `instances/...`      | GCP      | Private IP                   | IAM DB Auth / Workload ID     | 99.95%         | Read-only mode         |
| SMTP relay `smtp.example.org`  | External | Egress via NAT / FW allow    | TLS + credentials in Secret   | n/a            | Queue + backoff        |

- **Local/dev testing without dependency:** Emulators, stubs, feature flags.

## 4. Internal dependencies (Kubernetes resource inventory)
| Kind        | Name     | Namespace   | Purpose         | Criticality | Source path (helm/kustomize) | Ports/Proto | Requests/Limits   | Storage            |
|-------------|----------|-------------|-----------------|------------|------------------------------|------------|-------------------|--------------------|
| Deployment  | api      | platform-x  | REST API        | P1         | `charts/api`                 | 8080/TCP   | 200m/512Mi; 1/1Gi | ‚Äì                  |
| Service     | api      | platform-x  | ClusterIP       | P1         | `charts/api`                 | 8080       | ‚Äì                 | ‚Äì                  |
| VirtualSvc  | api      | platform-x  | Ingress routing | P1         | `charts/mesh`                | 443/HTTP2  | ‚Äì                 | ‚Äì                  |
| HPA         | api      | platform-x  | Autoscaling     | P2         | `charts/api`                 | ‚Äì          | CPU 60%           | ‚Äì                  |
| CronJob     | gc       | platform-x  | Cleanup jobs    | P3         | `charts/gc`                  | ‚Äì          | 100m/256Mi        | ‚Äì                  |
| PVC         | data     | platform-x  | App data        | P1         | `charts/db`                  | ‚Äì          | ‚Äì                 | 200Gi / fast-ssd   |

---

# Operations

## 5. Runbooks (step-by-step)
### 5.1 Incident: 5xx at ingress
- **Signals/alerts:** `<alert-name>`, dashboard: `<grafana-url>`.
- **Diagnosis (first 5‚Äì10 minutes):**
  1. `kubectl -n platform-x get pods -o wide` ‚Äî look for CrashLoopBackOff.
  2. `istioctl proxy-config clusters <pod>` ‚Äî upstream status.
  3. `kubectl -n platform-x logs deploy/api --tail=100` ‚Äî error patterns.
- **Workaround:** Shift traffic to previous revision (Argo Rollouts promote/abort).
- **Fix:** Helm `helm rollback <release> <rev>` or Argo rollback.
- **Post-incident:** 24h RCA; add test/alert.

### 5.2 Incident: elevated latency / DB errors
- **Checks:** p95/p99, CPU/mem saturation, GC, connection pool, SQL errors.
- **Actions:** Temporarily raise replicas/HPA max; feature-flag cache; never recreate PVC without a backup & plan.

> Link each alert to a runbook, with ownership and expected TTR.

## 6. How to deploy (Ops cycle)
- **Pre-checks:** etcd quorum healthy, nodes ready, image exists in registry, free capacity in pool.
- **Commands (examples):**
  - **Helm**
    ```bash
    helm upgrade --install api charts/api \
      -n platform-x -f values/values-prod.yaml --atomic --timeout 10m
    ```
  - **Argo CD**
    - Sync policy: <auto/manual>; wave ordering documented.
    - Manual commands: `argocd app sync <app>`; rollback instructions.
- **Smoke tests:** `GET /healthz` and readiness; synthetic checks.
- **Post-release validation:** error budget burn, SLO on track, no new alerts.
- **Rollback:** one command + link to runbook 5.1.

## 7. Metrics (what and where)
- **Sources:** App `/metrics` (Prometheus), kube-state-metrics, Istio telemetry.
- **Key SLIs (PromQL examples):**
  - Availability:
    ```
    success_rate = 1 - (sum(rate(http_requests_total{status=~"5.."}[5m]))
                         / sum(rate(http_requests_total[5m])))
    ```
  - Latency:
    ```
    histogram_quantile(0.95, sum by (le) (rate(http_request_duration_seconds_bucket[5m])))
    ```
  - Saturation: CPU/mem, restarts, HPA activity.
- **SLO targets:** e.g., uptime ‚â• 99.9%, p95 < 300 ms (prod).
- **Dashboards:** Grafana UIDs/links.
- **Alerts:** rule name, threshold, suppression policy, linked runbook.

## 8. Logs (what and where)
- **Collection:** stdout/stderr via Fluent Bit/Vector ‚Üí Loki / ELK / Cloud Logging.
- **Format:** JSON with mandatory fields: `trace_id`, `span_id`, `tenant_id`, `request_id`.
- **Retention:** dev 7d; prod 30‚Äì90d; PII masking rules.
- **Saved queries:** links or query templates.
- **Correlation:** From alert ‚Üí logs/traces workflow (how to pivot by trace_id).

---

# Appendices (Optional Modules ‚Äî add as needed)

## A. Security & Compliance
- Threat model (brief): data handled, trust boundaries, likely attackers.
- Signed images (cosign), SBOM, admission policy (Kyverno/Gatekeeper), Pod Security.
- Secrets lifecycle: source of truth, rotation frequency, access controls.
- NetworkPolicy baseline, mTLS, certificate sources and rotation.

## B. Backup & Disaster Recovery
- What is backed up (PVC/DB/config), tool (Velero/operator), target bucket/region.
- RPO / RTO, DR drills (frequency, last tested on).

## C. Performance & Capacity
- Expected load (QPS, payload sizes), profiling notes.
- Scaling plan (horizontal/vertical), HPA/KEDA bounds, resource headroom.

## D. Networking & Multicluster (Anthos)
- Endpoint locations, global routing, failover policy.
- Istio/mesh CRD version compatibility and upgrade path.

## E. FinOps & Quotas
- Cost drivers (storage, egress, GCP services), budget alerts.
- GCP quotas required and monitoring.

## F. Decommissioning (Sunset Plan)
- Data migration/archival steps, EOL date, stakeholder notifications.

## G. Quality & Testing
- e2e in ephemeral Kubernetes (kind), test data strategy, chaos scenarios.

## H. Compatibility Matrix
- k8s/Istio/sidecar versions, client SDKs, DB schema versions, API compatibility notes.

````

---

## Minimal repo layout (docs-as-code)

```
docs/
  design/<component-id>.md
  runbooks/<alert-or-symptom>.md
  ops/deploy.md
  ops/rollback.md
  ops/checklists.md
  adr/adr-001-...md
charts/ or kustomize/
  ...
```

## Opinionated defaults (drop into `values.yaml` if useful)

```yaml
resources:
  requests: { cpu: "200m", memory: "512Mi" }
  limits:   { cpu: "1",    memory: "1Gi" }
readinessProbe:
  httpGet: { path: /ready,  port: 8080 }
  periodSeconds: 10
livenessProbe:
  httpGet: { path: /healthz, port: 8080 }
  periodSeconds: 10
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 60
mesh:
  mtls: strict
logging:
  format: json
  include: [trace_id, span_id, tenant_id, request_id]
```

## Pre-prod checklist (quick)

* [ ] Images signed; SBOM attached.
* [ ] Secrets via External Secrets + KMS; rotation policy documented.
* [ ] Requests/limits set; HPA/KEDA configured.
* [ ] NetworkPolicy least-privilege for ingress/egress.
* [ ] SLOs defined; alerts linked to runbooks.
* [ ] Grafana dashboards published and linked here.
* [ ] Backups and DR plan verified.
* [ ] Rollback tested in preprod.

---

If you want, tell me the first component‚Äôs basics (name, envs, delivery tool, GCP services), and I‚Äôll prefill this template with realistic examples and tables.



---
---
---

---
title: <Component name>
component_id: <unique-id>
owners: ["<name or team>"]
stakeholders: ["Platform", "SRE", "Security", "FinOps", "Tenant X"]
status: Draft | In-Review | Approved | Active | Deprecated | Retired
doc_version: "v1.0.0"
component_version: "<semver or commit>"
last_reviewed: "YYYY-MM-DD"
next_review_due: "YYYY-MM-DD"
links:
  repo: "<git-url>"
  ci_cd: "<pipeline-url>"
  adr: ["<adr-001-...>"]
  dashboards: ["<grafana-url>"]
  alerts: ["<alertmanager-url or policy>"]
  runbooks: ["<runbook-1>", "<runbook-2>"]
  argo_app: "<argocd-app if any>"
  docs_site: "<internal-docs url>"
---

## 0. Document Lifecycle
- **Purpose:** Why this document exists and who should use it.
- **Change process:** PRs to `docs/` with mandatory reviewers: <list>.
- **Review cadence:** Every <N> months; owner: <name/role>.
- **Status criteria:**
  - *Draft* ‚Äî gathering requirements.
  - *In-Review* ‚Äî architecture review in progress.
  - *Approved* ‚Äî design signed off.
  - *Active* ‚Äî implemented and running in production.
  - *Deprecated/Retired* ‚Äî decommission plan / completed retirement.
- **Changelog:** Bullet list of key changes with dates.

## 1. What are we building and for whom? (Business goals)
- **One-paragraph summary:** What the component does and the value it delivers.
- **Primary users/roles:** Tenants, Platform, SRE, Security, Billing, etc.
- **Business goals & KPIs:** <goal>, <success metric/SLI/SLO>, <acceptance criteria>.
- **Explicit non-goals (out of scope):** What we intentionally exclude.

## 2. How is it deployed in the cluster?
- **Delivery mechanism:** Helm / Kustomize / Argo CD / Flux (where the manifests live).
- **Environments & rollout strategy:** dev / preprod / prod; Blue-Green, Canary, Argo Rollouts.
- **Artifacts:** Image `<registry>/<project>/<image>:<tag>`, SBOM, cosign signature.
- **Config & secrets:** ConfigMap/Secret, External Secrets (GCP Secret Manager/KMS).
- **Networking & exposure:** Namespace, Service(s), Ingress / Istio Gateway + VirtualService.
- **Service mesh:** mTLS mode (PeerAuthentication), AuthorizationPolicy, DestinationRule.
- **Scaling:** HPA/KEDA triggers (CPU/memory/RPS/Pub/Sub/etc.).
- **Updates & rollback:** Commands/procedure, version compatibility matrix.
- **Scheduling & resources:** requests/limits, affinity/tolerations, securityContext/PodSecurity.
- **Storage:** PVC/StorageClass, size/class, backup policy, retention.
- **Node constraints:** Bare-metal specifics (NICs, storage classes, NUMA if relevant).

## 3. External dependencies
List services outside the cluster and/or third-party providers.

| Service / Resource             | Provider | Network Path                 | AuthN/AuthZ                   | Dependency SLA | Degradation / Fallback |
|--------------------------------|----------|------------------------------|-------------------------------|----------------|------------------------|
| Pub/Sub topic `projects/...`   | GCP      | VPC / VPN / Interconnect     | IAM SA `<service-account>`    | 99.9%          | Retry + DLQ            |
| Cloud SQL `instances/...`      | GCP      | Private IP                   | IAM DB Auth / Workload ID     | 99.95%         | Read-only mode         |
| SMTP relay `smtp.example.org`  | External | Egress via NAT / FW allow    | TLS + credentials in Secret   | n/a            | Queue + backoff        |

- **Local/dev testing without dependency:** Emulators, stubs, feature flags.

## 4. Internal dependencies (Kubernetes resource inventory)
| Kind        | Name     | Namespace   | Purpose         | Criticality | Source path (helm/kustomize) | Ports/Proto | Requests/Limits   | Storage            |
|-------------|----------|-------------|-----------------|------------|------------------------------|------------|-------------------|--------------------|
| Deployment  | api      | platform-x  | REST API        | P1         | `charts/api`                 | 8080/TCP   | 200m/512Mi; 1/1Gi | ‚Äì                  |
| Service     | api      | platform-x  | ClusterIP       | P1         | `charts/api`                 | 8080       | ‚Äì                 | ‚Äì                  |
| VirtualSvc  | api      | platform-x  | Ingress routing | P1         | `charts/mesh`                | 443/HTTP2  | ‚Äì                 | ‚Äì                  |
| HPA         | api      | platform-x  | Autoscaling     | P2         | `charts/api`                 | ‚Äì          | CPU 60%           | ‚Äì                  |
| CronJob     | gc       | platform-x  | Cleanup jobs    | P3         | `charts/gc`                  | ‚Äì          | 100m/256Mi        | ‚Äì                  |
| PVC         | data     | platform-x  | App data        | P1         | `charts/db`                  | ‚Äì          | ‚Äì                 | 200Gi / fast-ssd   |

---

# Operations

## 5. Runbooks (step-by-step)
### 5.1 Incident: 5xx at ingress
- **Signals/alerts:** `<alert-name>`, dashboard: `<grafana-url>`.
- **Diagnosis (first 5‚Äì10 minutes):**
  1. `kubectl -n platform-x get pods -o wide` ‚Äî look for CrashLoopBackOff.
  2. `istioctl proxy-config clusters <pod>` ‚Äî upstream status.
  3. `kubectl -n platform-x logs deploy/api --tail=100` ‚Äî error patterns.
- **Workaround:** Shift traffic to previous revision (Argo Rollouts promote/abort).
- **Fix:** Helm `helm rollback <release> <rev>` or Argo rollback.
- **Post-incident:** 24h RCA; add test/alert.

### 5.2 Incident: elevated latency / DB errors
- **Checks:** p95/p99, CPU/mem saturation, GC, connection pool, SQL errors.
- **Actions:** Temporarily raise replicas/HPA max; feature-flag cache; never recreate PVC without a backup & plan.

> Link each alert to a runbook, with ownership and expected TTR.

## 6. How to deploy (Ops cycle)
- **Pre-checks:** etcd quorum healthy, nodes ready, image exists in registry, free capacity in pool.
- **Commands (examples):**
  - **Helm**
    ```bash
    helm upgrade --install api charts/api \
      -n platform-x -f values/values-prod.yaml --atomic --timeout 10m
    ```
  - **Argo CD**
    - Sync policy: <auto/manual>; wave ordering documented.
    - Manual commands: `argocd app sync <app>`; rollback instructions.
- **Smoke tests:** `GET /healthz` and readiness; synthetic checks.
- **Post-release validation:** error budget burn, SLO on track, no new alerts.
- **Rollback:** one command + link to runbook 5.1.

## 7. Metrics (what and where)
- **Sources:** App `/metrics` (Prometheus), kube-state-metrics, Istio telemetry.
- **Key SLIs (PromQL examples):**
  - Availability:
    ```
    success_rate = 1 - (sum(rate(http_requests_total{status=~"5.."}[5m]))
                         / sum(rate(http_requests_total[5m])))
    ```
  - Latency:
    ```
    histogram_quantile(0.95, sum by (le) (rate(http_request_duration_seconds_bucket[5m])))
    ```
  - Saturation: CPU/mem, restarts, HPA activity.
- **SLO targets:** e.g., uptime ‚â• 99.9%, p95 < 300 ms (prod).
- **Dashboards:** Grafana UIDs/links.
- **Alerts:** rule name, threshold, suppression policy, linked runbook.

## 8. Logs (what and where)
- **Collection:** stdout/stderr via Fluent Bit/Vector ‚Üí Loki / ELK / Cloud Logging.
- **Format:** JSON with mandatory fields: `trace_id`, `span_id`, `tenant_id`, `request_id`.
- **Retention:** dev 7d; prod 30‚Äì90d; PII masking rules.
- **Saved queries:** links or query templates.
- **Correlation:** From alert ‚Üí logs/traces workflow (how to pivot by trace_id).

---

# Appendices (Optional Modules ‚Äî add as needed)

## A. Security & Compliance
- Threat model (brief): data handled, trust boundaries, likely attackers.
- Signed images (cosign), SBOM, admission policy (Kyverno/Gatekeeper), Pod Security.
- Secrets lifecycle: source of truth, rotation frequency, access controls.
- NetworkPolicy baseline, mTLS, certificate sources and rotation.

## B. Backup & Disaster Recovery
- What is backed up (PVC/DB/config), tool (Velero/operator), target bucket/region.
- RPO / RTO, DR drills (frequency, last tested on).

## C. Performance & Capacity
- Expected load (QPS, payload sizes), profiling notes.
- Scaling plan (horizontal/vertical), HPA/KEDA bounds, resource headroom.

## D. Networking & Multicluster (Anthos)
- Endpoint locations, global routing, failover policy.
- Istio/mesh CRD version compatibility and upgrade path.

## E. FinOps & Quotas
- Cost drivers (storage, egress, GCP services), budget alerts.
- GCP quotas required and monitoring.

## F. Decommissioning (Sunset Plan)
- Data migration/archival steps, EOL date, stakeholder notifications.

## G. Quality & Testing
- e2e in ephemeral Kubernetes (kind), test data strategy, chaos scenarios.

## H. Compatibility Matrix
- k8s/Istio/sidecar versions, client SDKs, DB schema versions, API compatibility notes.




