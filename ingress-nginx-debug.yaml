–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é **–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–ª–∞–¥–∫–µ –ø—Ä–æ–±–ª–µ–º —Å Nginx Ingress –≤ Kubernetes**, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞:

- Ingress –Ω–µ –æ—Ç–¥–∞—ë—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
- –í–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ 404/502
- Ingress –≤–æ–æ–±—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ
- –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö, backend-—Å–µ—Ä–≤–∏—Å–∞—Ö –∏–ª–∏ ingress-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ

---

## üõ† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ö–∞–∫ –¥–µ–±–∞–∂–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Nginx Ingress

### üìå 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ Ingress
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç `Ingress` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø–∏—Å–∞–Ω:

- –£–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π `host`
- –£–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ `paths`
- –ü—Ä–æ–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `serviceName` –∏ `servicePort`

–ü—Ä–∏–º–µ—Ä:
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-service
            port:
              number: 80
```

**–ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–∞–Ω–¥–æ–π:**
```bash
kubectl describe ingress my-app
```

---

### üì° 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ingress Controller

#### –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ **Ingress Controller** –∑–∞–ø—É—â–µ–Ω –∏ –∑–¥–æ—Ä–æ–≤:

```bash
kubectl get pods -n ingress-nginx
kubectl logs -n ingress-nginx <nginx-ingress-pod-name>
```

- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö (`panic`, `no such host`, `timeout`)
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å endpoint:
```bash
kubectl get svc -n ingress-nginx
```

---

### üåê 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞

- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DNS –¥–ª—è `host` –∏–∑ Ingress —Ä–∞–±–æ—Ç–∞–µ—Ç:
```bash
nslookup myapp.example.com
```

- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫—É–¥–∞ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∞–¥—Ä–µ—Å –∏ –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç:
```bash
curl -v http://myapp.example.com
```

---

### üïµÔ∏è 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: Ingress ‚Üí Service ‚Üí Pod

#### 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
```bash
kubectl get svc my-app-service
```

#### 2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞–±–æ—á–∏–µ Pod‚Äô—ã:
```bash
kubectl get endpoints my-app-service
```

> –ï—Å–ª–∏ `ENDPOINTS` –ø—É—Å—Ç–æ–π ‚Äî —Å–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–∫–∏.

#### 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:
```bash
kubectl get pods --show-labels
```

---

### üîç 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ä–æ—É—Ç–∏–Ω–≥–∞:

- –ù–∞–ø—Ä–∏–º–µ—Ä:
  ```yaml
  nginx.ingress.kubernetes.io/rewrite-target: /
  nginx.ingress.kubernetes.io/ssl-redirect: "false"
  ```

–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π:
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/

---

### üß∞ 6. –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏

–î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å debug-–ª–æ–≥–∏:

```yaml
controller:
  config:
    enable-underscores-in-headers: "true"
  extraArgs:
    v: "3"
```

–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é:
```yaml
nginx.ingress.kubernetes.io/configuration-snippet: |
  more_set_headers "X-Debug: true";
```

---

### üìë 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞

–ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —É—Ç–∏–ª–∏—Ç–∞ `kubectl exec`, –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—å pod:

```bash
kubectl exec -it <nginx-pod> -n ingress-nginx -- /bin/bash
cat /etc/nginx/nginx.conf
```

---

### üì¶ 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ CRD –∏ –≤–µ—Ä—Å–∏–∏

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è API:
```bash
kubectl api-resources | grep ingress
```

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `networking.k8s.io/v1`, –∞ –Ω–µ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è `extensions/v1beta1`.

---

### üßº 9. –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏

| –ü—Ä–æ–±–ª–µ–º–∞                | –ü—Ä–∏—á–∏–Ω–∞                                               |
|------------------------|--------------------------------------------------------|
| 404 Not Found          | –ù–µ–≤–µ—Ä–Ω—ã–π path/host, —Å–µ—Ä–≤–∏—Å –±–µ–∑ endpoint‚Äô–æ–≤            |
| 502 Bad Gateway        | Pod –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–µ—Ä–≤–∏—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏–µ Pod‚Äô—ã   |
| Ingress –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç    | –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ingress‚Äô—É  |
| No matches for kind    | –£—Å—Ç–∞—Ä–µ–≤—à–∏–π API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π CRD                  |

---

## ‚úÖ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞:

- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ **—Å–æ–±—ã—Ç–∏—è**:
  ```bash
  kubectl get events --sort-by='.metadata.creationTimestamp'
  ```
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ **NetworkPolicy** –∏–ª–∏ **Firewall**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **port-forward** –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
  ```bash
  kubectl port-forward svc/my-app-service 8080:80
  ```

---

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å —ç—Ç–æ –≤ –≤–∏–¥–µ PDF –∏–ª–∏ Markdown-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–ª–µ–≥–∞–º. –ù—É–∂–Ω–æ?


***
***
***


Sure! Here's the English version of the **"How to Debug Nginx Ingress Issues in Kubernetes"** guide:

---

## üõ† Guide: How to Debug Nginx Ingress Issues in Kubernetes

This guide helps users troubleshoot when:

- Ingress does not return the expected response  
- You get 404/502 errors  
- The Ingress is completely inaccessible  
- The issue is related to annotations, backend services, or the ingress controller  

---

### üìå 1. Validate the Ingress Manifest

Ensure the `Ingress` manifest is correctly defined:

- Proper `host` is specified  
- Correct `paths` are defined  
- The correct `serviceName` and `servicePort` are used  

Example:
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-service
            port:
              number: 80
```

**Check using:**
```bash
kubectl describe ingress my-app
```

---

### üì° 2. Verify Ingress Controller Availability

#### Make sure the **Ingress Controller** is running and healthy:

```bash
kubectl get pods -n ingress-nginx
kubectl logs -n ingress-nginx <nginx-ingress-pod-name>
```

- Look for errors in logs (`panic`, `no such host`, `timeout`)
- Make sure the service exists:
```bash
kubectl get svc -n ingress-nginx
```

---

### üåê 3. Check DNS and Host Accessibility

- Ensure DNS is resolving the `host` correctly:
```bash
nslookup myapp.example.com
```

- Check where it resolves and if the port is open:
```bash
curl -v http://myapp.example.com
```

---

### üïµÔ∏è 4. Verify the Connection Chain: Ingress ‚Üí Service ‚Üí Pod

#### 1. Check that the service exists:
```bash
kubectl get svc my-app-service
```

#### 2. Confirm the service points to healthy pods:
```bash
kubectl get endpoints my-app-service
```

> If `ENDPOINTS` is empty, the service can‚Äôt forward traffic. Check labels.

#### 3. Verify pod labels match service selectors:
```bash
kubectl get pods --show-labels
```

---

### üîç 5. Review Annotations and Configurations

Incorrect annotations may break routing.

Example:
```yaml
nginx.ingress.kubernetes.io/rewrite-target: /
nginx.ingress.kubernetes.io/ssl-redirect: "false"
```

Full list of supported annotations:  
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/

---

### üß∞ 6. Enable Debug Mode (Optional)

Enable debug logging for deeper inspection:

```yaml
controller:
  config:
    enable-underscores-in-headers: "true"
  extraArgs:
    v: "3"
```

Or temporarily inject a debug header:
```yaml
nginx.ingress.kubernetes.io/configuration-snippet: |
  more_set_headers "X-Debug: true";
```

---

### üìë 7. Inspect Nginx Configuration Inside the Controller

If needed, access the pod shell and inspect Nginx config:

```bash
kubectl exec -it <nginx-pod> -n ingress-nginx -- /bin/bash
cat /etc/nginx/nginx.conf
```

---

### üì¶ 8. Check CRDs and API Version

Ensure the correct API version is used:

```bash
kubectl api-resources | grep ingress
```

Use `networking.k8s.io/v1`, not the deprecated `extensions/v1beta1`.

---

### üßº 9. Common Errors and Their Causes

| Problem               | Cause                                                   |
|----------------------|----------------------------------------------------------|
| 404 Not Found         | Incorrect path/host, service has no endpoints            |
| 502 Bad Gateway       | Pods are unavailable, service points to invalid pods     |
| Ingress not working   | Controller is not installed or not associated properly   |
| No matches for kind   | Deprecated API version or missing CRD                    |

---

## ‚úÖ Final Checks

If the issue persists:

- Check **Events**:
  ```bash
  kubectl get events --sort-by='.metadata.creationTimestamp'
  ```
- Inspect **NetworkPolicy** or **firewall rules**
- Use **port-forward** as a temporary workaround:
  ```bash
  kubectl port-forward svc/my-app-service 8080:80
  ```

---

Would you like me to generate this as a Markdown or PDF file to share with your team?
